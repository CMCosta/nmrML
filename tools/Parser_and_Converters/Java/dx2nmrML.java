
import java.io.FileInputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.GregorianCalendar;

import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

import javax.xml.bind.*;

// import java content classes generated by binding compiler
import org.nmrml.schema.*;

/*
 * $Id: dx2nmrML.java,v 1.1 2013-07-15 09:49:33 DJ $
 */
 
public class dx2nmrML {
    
    // This sample application demonstrates how to create a nmrML file
    // based on a java object tree generated by the JAXB XJC Tool (JDK 7 and above).

    public static int ID_count;
    public static String getNewIdentifier ( ) {
       return String.format("ID%05d",++ID_count);
    }
    public static BigInteger getBigInteger (Integer entier) {
       return new BigInteger(entier.toString());
    }
    

    public static void main( String[] args ) {

        try {

            ObjectFactory objFactory = new ObjectFactory();
            NmrMLType nmrMLtype = (NmrMLType) objFactory.createNmrMLType();
 
            nmrMLtype.setVersion("1.0");
            nmrMLtype.setAccession("S1");

       /* CV List : used as references for all CV in the document */
            CVListType cvList = (CVListType) objFactory.createCVListType();
            CVType cvNMR = (CVType) objFactory.createCVType();
            cvNMR.setId("NMR");
            cvNMR.setFullName("Nuclear Magnetic Resonance CV");
            cvNMR.setVersion("0.1.0");
            cvNMR.setURI("http://msi-ontology.sourceforge.net/ontology/NMR.owl");
            cvList.getCv().add(cvNMR);
            CVType cvOBI = (CVType) objFactory.createCVType();
            cvOBI.setId("OBI");
            cvOBI.setFullName("Ontology for Biomedical Investigations");
            cvOBI.setVersion("2012.07.01");
            cvOBI.setURI("http://purl.obolibrary.org/obo/obi");
            cvList.getCv().add(cvOBI);
            CVType cvUO = (CVType) objFactory.createCVType();
            cvUO.setId("UO");
            cvUO.setFullName("Unit Ontology");
            cvUO.setVersion("3.2.0");
            cvUO.setURI("http://purl.obolibrary.org/obo/");
            cvList.getCv().add(cvUO);
            CVType cvCHEBI = (CVType) objFactory.createCVType();
            cvCHEBI.setId("CHEBI");
            cvCHEBI.setFullName("Chemical Entities of Biological Interest Ontology");
            cvCHEBI.setVersion("105");
            cvCHEBI.setURI("http://purl.obolibrary.org/obo/");
            cvList.getCv().add(cvCHEBI);
            cvList.setCount(getBigInteger(3));
            nmrMLtype.setCvList(cvList);


       /* FileDescription */
            FileDescriptionType filedesc = (FileDescriptionType) objFactory.createFileDescriptionType();
            ParamGroupType paramgrp = (ParamGroupType) objFactory.createParamGroupType();
            CVParamType cvp1 = (CVParamType) objFactory.createCVParamType();
            cvp1.setCvRef(cvNMR);
            cvp1.setAccession("#NMR_400128");
            cvp1.setName("NMR Sample");
            cvp1.setValue("");
            paramgrp.getCvParam().add(cvp1);
            CVParamType cvp2 = (CVParamType) objFactory.createCVParamType();
            cvp2.setCvRef(cvNMR);
            cvp2.setAccession("#NMR_400165");
            cvp2.setName("one_dimensional_NMR_acquisition_parameter_set");
            cvp2.setValue("");
            paramgrp.getCvParam().add(cvp2);
            filedesc.setFileContent(paramgrp);
            nmrMLtype.setFileDescription(filedesc);

       /* Contact List */
            ContactListType contactlist = (ContactListType) objFactory.createContactListType();
            ContactType contact1 = (ContactType) objFactory.createContactType();
            contact1.setId(getNewIdentifier());
            contact1.setFullname("Daniel Jacob");
            contact1.setOrganization("INRA");
            contactlist.getContact().add(contact1);
            nmrMLtype.setContactList(contactlist);

       /* SourceFile List */
            SourceFileListType srcfilelist = (SourceFileListType) objFactory.createSourceFileListType();
            SourceFileType pulsefile = (SourceFileType) objFactory.createSourceFileType();
            pulsefile.setId(getNewIdentifier());
            pulsefile.setName("zg.eretic.1H.2");
            CVParamType cvpf = (CVParamType) objFactory.createCVParamType();
            cvpf.setCvRef(cvNMR);
            cvpf.setAccession("#MSI_400169");
            cvpf.setName("one_dimensional_pulse_sequence");
            cvpf.setValue("");
            pulsefile.getCvParam().add(cvpf);
            srcfilelist.getSourceFile().add(pulsefile);
            srcfilelist.setCount(getBigInteger(1));
            nmrMLtype.setSourceFileList(srcfilelist);

       /* Software List */
            SoftwareListType softwareList = (SoftwareListType) objFactory.createSoftwareListType();
            SoftwareType software1 = (SoftwareType) objFactory.createSoftwareType();
            CVParamType cvsoftnmr = (CVParamType) objFactory.createCVParamType();
            cvsoftnmr.setCvRef(cvNMR);
            cvsoftnmr.setAccession("#NMR_400215");
            cvsoftnmr.setName("TopSpin_1.3");
            cvsoftnmr.setValue("");
            software1.getCvParam().add(cvsoftnmr);
            software1.setId(getNewIdentifier());
            software1.setVersion("1.3");
            softwareList.getSoftware().add(software1);
            softwareList.setCount(getBigInteger(1));
            nmrMLtype.setSoftwareList(softwareList);

       /* InstrumentConfiguration List */
            SoftwareRefType softref1 = (SoftwareRefType) objFactory.createSoftwareRefType();
            softref1.setRef(software1);
            InstrumentConfigurationListType instrumentConfList = 
                      (InstrumentConfigurationListType) objFactory.createInstrumentConfigurationListType();
            InstrumentConfigurationType instrumentConf = 
                      (InstrumentConfigurationType) objFactory.createInstrumentConfigurationType();
            instrumentConf.setSoftwareRef(softref1);
            instrumentConf.setId("PMB001");
            instrumentConfList.getInstrumentConfiguration().add(instrumentConf);
            instrumentConfList.setCount(getBigInteger(1));
/* componentListType needed to be implemented to have the corresponding nmrML fragment that looks like to:
          <componentList count="2">
                <probe order="1">
                    <cvParam cvRef="NMR" accession="MSI_400194" name="1mm_MicroProbe" value=""/>
                </probe>
                <autosampler order="2">
                    <cvParam cvRef="NMR" accession="MSI_400206" name="Bruker_BEST_NMR" value=""/>
                </autosampler>
           </componentList>
*/
            nmrMLtype.setInstrumentConfigurationList(instrumentConfList);
            

       /* DataProcessing List */
            DataProcessingListType dataproclist = (DataProcessingListType) objFactory.createDataProcessingListType();
            DataProcessingType dataproc = (DataProcessingType) objFactory.createDataProcessingType();
            ProcessingMethodType procmethod = (ProcessingMethodType) objFactory.createProcessingMethodType();
            procmethod.setOrder(getBigInteger(1));
            procmethod.setSoftwareRef(software1);
            CVParamType cvproc1 = (CVParamType) objFactory.createCVParamType();
            cvproc1.setCvRef(cvNMR);
            cvproc1.setAccession("#MSI_400043");
            cvproc1.setName("data_transformation");
            cvproc1.setValue("");
            procmethod.getCvParam().add(cvproc1);
            dataproc.getProcessingMethod().add(procmethod);
            dataproc.setId("Proc_PMB001");
            dataproclist.getDataProcessing().add(dataproc);
            dataproclist.setCount(getBigInteger(1));
            nmrMLtype.setDataProcessingList(dataproclist);

       /* Sample List */
            SampleListType samplelist = (SampleListType) objFactory.createSampleListType();
            SampleType sample = (SampleType) objFactory.createSampleType();
            sample.setOriginalBiologicalSampleReference("http://www.cbib.u-bordeaux2.fr/MERYB/res/spectra/367");
            CVTermType cvSolvent = (CVTermType) objFactory.createCVTermType();
            cvSolvent.setCvRef(cvCHEBI);
            cvSolvent.setAccession("CHEBI_41981");
            cvSolvent.setAccession("D2O");
            sample.setSolventType(cvSolvent);
            CVTermType cvBuffer = (CVTermType) objFactory.createCVTermType();
            cvBuffer.setCvRef(cvCHEBI);
            cvBuffer.setAccession("CHEBI_60004");
            cvBuffer.setAccession("Mixture");
            sample.setSolventType(cvBuffer);
            sample.setPostBufferpH(new Double(6.0));
            samplelist.getSample().add(sample);
            samplelist.setCount(getBigInteger(1));
            nmrMLtype.setSampleList(samplelist);

       /* ReferenceableParamGroup List */
            /* TODO */

       /* Spectrum List */
            /* TODO */


       /* Acquition */

            /* AcquisitionParameterSet */
            Acquisition1DType.AcquisitionParameterSet acqparam = 
                      (Acquisition1DType.AcquisitionParameterSet) objFactory.createAcquisition1DTypeAcquisitionParameterSet();
            acqparam.setNumberOfScans(getBigInteger(64));

            ValueWithUnitType  SweepWidth = (ValueWithUnitType) objFactory.createValueWithUnitType();            
            SweepWidth.setValue("12.01532577");
            SweepWidth.setUnitCvRef(cvUO);
            SweepWidth.setUnitAccession("UO_0000169");
            SweepWidth.setUnitName("parts per million");
            
            ValueWithUnitType  IrradiationFrequency = (ValueWithUnitType) objFactory.createValueWithUnitType();
            IrradiationFrequency.setValue("500162500.8");
            IrradiationFrequency.setUnitCvRef(cvUO);
            IrradiationFrequency.setUnitAccession("UO_0000106");
            IrradiationFrequency.setUnitName("Hertz");

            ValueWithUnitType  gammaB1PulseFieldStrength = (ValueWithUnitType) objFactory.createValueWithUnitType();
            gammaB1PulseFieldStrength.setValue("500160000.0");
            gammaB1PulseFieldStrength.setUnitCvRef(cvUO);
            gammaB1PulseFieldStrength.setUnitAccession("UO_0000169");
            gammaB1PulseFieldStrength.setUnitName("Hertz");
            
           /* DirectDimensionParameterSet */
            AcquisitionDimensionParameterSetType acqdimparam = 
                     (AcquisitionDimensionParameterSetType) objFactory.createAcquisitionDimensionParameterSetType();
            acqdimparam.setNumberOfDataPoints(getBigInteger(32768));
            acqdimparam.setAcquisitionNucleus("1H");
            acqdimparam.setSweepWidth(SweepWidth);
            acqdimparam.setIrradiationFrequency(IrradiationFrequency);
            acqdimparam.setGammaB1PulseFieldStrength(gammaB1PulseFieldStrength);
            acqparam.setDirectDimensionParameterSet(acqdimparam);

           /* Acquisition1D */
            Acquisition1DType acq1Dtype = (Acquisition1DType) objFactory.createAcquisition1DType();
            acq1Dtype.setAcquisitionParameterSet(acqparam);

            AcquisitionType acqtype = (AcquisitionType) objFactory.createAcquisitionType();
            acqtype.setAcquisition1D(acq1Dtype);

            nmrMLtype.setAcquisition(acqtype);

       /* Generate XML */
            JAXBElement<NmrMLType> nmrML = (JAXBElement<NmrMLType>) objFactory.createNmrML(nmrMLtype);

            // create a JAXBContext capable of handling classes generated into the org.nmrml.schema package
            JAXBContext jc = JAXBContext.newInstance( "org.nmrml.schema" );

            // create a Marshaller and marshal to a file
            Marshaller m = jc.createMarshaller();
            m.setProperty( Marshaller.JAXB_FORMATTED_OUTPUT, new Boolean(true) );
            m.marshal( nmrML, System.out );
            
        } catch( JAXBException je ) {
            je.printStackTrace();
        }
    }
}
