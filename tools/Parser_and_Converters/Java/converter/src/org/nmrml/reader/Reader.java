/*
 * $Id: Reader.java,v 1.0.alpha March 2014 (C) INRA - DJ $
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package org.nmrml.reader;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.GnuParser;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.MissingArgumentException;
import org.apache.commons.cli.MissingOptionException;
import org.apache.commons.cli.OptionBuilder;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;
import org.apache.commons.cli.PosixParser;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.channels.FileChannel;
import java.nio.file.Files;
import java.util.GregorianCalendar;

import java.util.*;
//import java.lang.*;
import java.lang.Double;
import java.lang.Integer;

import org.nmrml.parser.*;
import org.nmrml.parser.bruker.*;

import org.nmrml.schema.*;
import org.nmrml.cv.*;

import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;


// create a nmrML file based on a java object tree generated by the JAXB XJC Tool (JDK 7 and above).
public class Reader {

    public static void main( String[] args ) {

        Acqu acq = new Acqu();
        Proc proc = new Proc();

        Options options = new Options();
        options.addOption("h", "help", false, "prints the help content");
        options.addOption(OptionBuilder
           .withArgName("nmrML file")
           .hasArg()
           .isRequired()
           .withDescription("input  nmrML file")
           .withLongOpt("input")
           .create("i"));
        options.addOption(OptionBuilder
           .withArgName("output text file")
           .hasArg()
           .withDescription("extract FID data onto a text file")
           .withLongOpt("fid")
           .create());
        options.addOption(OptionBuilder
           .withArgName("output text file")
           .hasArg()
           .withDescription("extract Real Spectrum data onto a text file")
           .withLongOpt("real-spectrum")
           .create());

        try {

           String current_dir = new java.io.File( "." ).getCanonicalPath();

           CommandLineParser parser = new GnuParser();
           CommandLine cmd = parser.parse(options, args);

           String inputFile = cmd.getOptionValue("i");

        /* Read nmrML file */
            JAXBContext jc = JAXBContext.newInstance(NmrMLType.class);
            Unmarshaller unmarshaller = jc.createUnmarshaller();
            NmrMLType nmrMLtype = (NmrMLType) unmarshaller.unmarshal(new File(inputFile));

    /* ACQUISITION PARAMETERS */
            AcquisitionType schema_acq = nmrMLtype.getAcquisition();
            Acquisition1DType acq1D = schema_acq.getAcquisition1D();
            AcquisitionParameterSet1DType acq1DParamSet = acq1D.getAcquisitionParameterSet();

            AcquisitionDimensionParameterSetType acqdimparam = acq1DParamSet.getDirectDimensionParameterSet();

            acq.setNumberOfScans(acq1DParamSet.getNumberOfScans());
            acq.setNumberOfSteadyStateScans(acq1DParamSet.getNumberOfSteadyStateScans());
            acq.setTemperature(Double.parseDouble(acq1DParamSet.getSampleAcquisitionTemperature().getValue()));
            acq.setRelaxationDelay(Double.parseDouble(acq1DParamSet.getRelaxationDelay().getValue()));

            /* ... */

System.out.println("nmrML version = " + nmrMLtype.getVersion());

            /* Read FID data */
            if( cmd.hasOption( "fid" ) ) {
                String fileFile = cmd.getOptionValue("fid");
                BinaryDataArrayType schema_fidData = acq1D.getFidData();
                BinaryData fidData = new BinaryData();
                fidData.setEncodedLength(schema_fidData.getEncodedLength());
                fidData.setByteFormat(schema_fidData.getByteFormat());
                fidData.setCompressed(schema_fidData.isCompressed());
                if (fidData.isCompressed()) {
                    fidData.setData(fidData.decompress(schema_fidData.getValue()));
                } else {
                    fidData.setData(schema_fidData.getValue());
                }
                double [] fidValues = fidData.getDataAsDouble();
                BufferedWriter outfid = new BufferedWriter(new FileWriter(fileFile));
                int i=0;
                int dim = fidData.getEncodedSize()[1];
                while( i < fidValues.length ) {
                    for (int j=0; j<dim; j++) {
                        if (j>0) { outfid.write("\t"); i++; }
                        outfid.write(String.format("%f",fidValues[i]));
                    }
                    outfid.newLine();
                    i++;
                }
                outfid.close();
System.out.println("NumberOfSteadyStateScans = " + acq.getNumberOfSteadyStateScans());
System.out.println("NumberOfScans = " + acq.getNumberOfScans());
System.out.println("RelaxationDelay ("+acq1DParamSet.getRelaxationDelay().getUnitName()+") = "+acq.getRelaxationDelay());
System.out.println("SampleAcquisitionTemperature ("+acq1DParamSet.getSampleAcquisitionTemperature().getUnitName()+") = "+acq.getTemperature());
System.out.println("FID Encoded Length = " + schema_fidData.getValue().length);
System.out.println("FID Array Size = " + fidValues.length);

            }
            /* ... */

    /* PROCESSING PARAMETERS */
           if( cmd.hasOption( "real-spectrum" ) ) {

                String spectrumFile = cmd.getOptionValue("real-spectrum");
                SpectrumListType spectrumList = nmrMLtype.getSpectrumList();
                Spectrum1DType spectrum1D = spectrumList.getSpectrum1D().get(0);
                FirstDimensionProcessingParameterSetType procParam1D = spectrum1D.getFirstDimensionProcessingParameterSet();

                /* Read Real Spectrum data */
                BinaryDataArrayType schema_realSpectrum = spectrum1D.getSpectrumDataArray();
                BinaryData realSpectrum = new BinaryData();
                realSpectrum.setEncodedLength(schema_realSpectrum.getEncodedLength());
                realSpectrum.setByteFormat(schema_realSpectrum.getByteFormat());
                realSpectrum.setCompressed(schema_realSpectrum.isCompressed());
                if (realSpectrum.isCompressed()) {
                    realSpectrum.setData(realSpectrum.decompress(schema_realSpectrum.getValue()));
                } else {
                    realSpectrum.setData(schema_realSpectrum.getValue());
                }
                double [] realSpectrumValues = realSpectrum.getDataAsDouble();
                BufferedWriter out1r = new BufferedWriter(new FileWriter(spectrumFile));
                for (int k = 0; k < realSpectrumValues.length; k++) {
                     out1r.write(String.format("%f",realSpectrumValues[k]));
                     out1r.newLine();
                }
                out1r.close();
System.out.println("Real Spectrum Array Size = " + realSpectrumValues.length);
            }

            /* ... */

        } catch(MissingOptionException e){
            boolean help = false;
            try{
              Options helpOptions = new Options();
              helpOptions.addOption("h", "help", false, "prints the help content");
              CommandLineParser parser = new PosixParser();
              CommandLine line = parser.parse(helpOptions, args);
              if(line.hasOption("h")) help = true;
            } catch(Exception ex){ }
            if(!help) System.err.println(e.getMessage());
            HelpFormatter formatter = new HelpFormatter();
            formatter.printHelp( "reader" , options );
            System.exit(1);
        } catch(MissingArgumentException e){
            System.err.println(e.getMessage());
            HelpFormatter formatter = new HelpFormatter();
            formatter.printHelp( "App" , options );
            System.exit(1);
        } catch(ParseException e){
            System.err.println("Error while parsing the command line: "+e.getMessage());
            System.exit(1);
        } catch( JAXBException je ) {
            je.printStackTrace();
        } catch( Exception e ) {
            e.printStackTrace();
        }

    }
}
