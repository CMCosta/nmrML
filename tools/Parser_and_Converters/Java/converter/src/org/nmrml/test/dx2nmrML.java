/*
 * $Id: dx2nmrML.java,v 1.1 Feb 2014 (C) INRA - DJ $
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package org.nmrml.test;

import java.io.FileInputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.GregorianCalendar;

import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

import javax.xml.bind.*;

// import java content classes generated by binding compiler
import org.nmrml.schema.*;
import org.nmrml.cv.*;

public class dx2nmrML {

    // This sample application demonstrates how to create a nmrML file
    // based on a java object tree generated by the JAXB XJC Tool (JDK 7 and above).

    public static int ID_count;
    public static String getNewIdentifier ( ) {
       return String.format("ID%05d",++ID_count);
    }

    public static BigInteger getBigInteger (Integer entier) {
       return new BigInteger(entier.toString());
    }


    public static void main( String[] args ) {

        try {

            ObjectFactory objFactory = new ObjectFactory();
            NmrMLType nmrMLtype = objFactory.createNmrMLType();

            nmrMLtype.setVersion("1.0");


       /* CV List : used as references for all CV in the document */
            CVLoader cvLoader = new CVLoader();

            CVListType cvList = objFactory.createCVListType();
            CVType cvNMR = cvLoader.fetchCVType("NMRCV");
            cvList.getCv().add(cvNMR);
            CVType cvOBI = cvLoader.fetchCVType("OBI");
            cvList.getCv().add(cvOBI);
            CVType cvUO = cvLoader.fetchCVType("UO");
            cvList.getCv().add(cvUO);
            CVType cvCHEBI = cvLoader.fetchCVType("CHEBI");
            cvList.getCv().add(cvCHEBI);
            cvList.setCount(getBigInteger(4));
            nmrMLtype.setCvList(cvList);


       /* FileDescription */

            FileDescriptionType filedesc = objFactory.createFileDescriptionType();
            ParamGroupType paramgrp = objFactory.createParamGroupType();
            paramgrp.getCvParam().add(cvLoader.fetchCVParam("NMRCV","NMR_SAMPLE"));
            paramgrp.getCvParam().add(cvLoader.fetchCVParam("NMRCV","ONE_DIM_NMR"));
            filedesc.setFileContent(paramgrp);
            nmrMLtype.setFileDescription(filedesc);


       /* Contact List */

            ContactListType contactlist = objFactory.createContactListType();
            ContactType contact1 = objFactory.createContactType();
            contact1.setId(getNewIdentifier());
            contact1.setFullname("Daniel Jacob");
            contact1.setOrganization("INRA");
            contactlist.getContact().add(contact1);
            nmrMLtype.setContactList(contactlist);


       /* Contact Ref List */

            ContactRefListType contactRefList = objFactory.createContactRefListType();
            ContactRefType contactRef = objFactory.createContactRefType();
            contactRef.setRef(contact1);
            contactRefList.getContactRef().add(contactRef);


       /* SourceFile List */

            SourceFileListType srcfilelist = objFactory.createSourceFileListType();
            /* Pulse sequence file */
            SourceFileType pulsefile = objFactory.createSourceFileType();
            pulsefile.setId(getNewIdentifier());
            pulsefile.setName("pulseprogram");
            pulsefile.getCvParam().add(cvLoader.fetchCVParam("NMRCV","PULSE_SEQ"));
            srcfilelist.getSourceFile().add(pulsefile);
            /* Acquisition parameter file */
            SourceFileType acqfile = objFactory.createSourceFileType();
            acqfile.setId(getNewIdentifier());
            acqfile.setName("1/acqus");
            acqfile.getCvParam().add(cvLoader.fetchCVParam("NMRCV","ACQUISITION_FILE"));
            srcfilelist.getSourceFile().add(acqfile);
            /* Processing parameter file */
            SourceFileType procfile = objFactory.createSourceFileType();
            procfile.setId(getNewIdentifier());
            procfile.setName("1/pdata/1/procs");
            procfile.getCvParam().add(cvLoader.fetchCVParam("NMRCV","PROCESSING_FILE"));
            srcfilelist.getSourceFile().add(procfile);

            srcfilelist.setCount(getBigInteger(3));
            nmrMLtype.setSourceFileList(srcfilelist);


       /* Software List */

            SoftwareListType softwareList = objFactory.createSoftwareListType();
            SoftwareType software1 = objFactory.createSoftwareType();
            CVTermType softterm1 = cvLoader.fetchCVTerm("NMRCV","TOPSPIN");
            software1.setCvRef(softterm1.getCvRef());
            software1.setAccession(softterm1.getAccession());
            software1.setName(softterm1.getName());
            software1.setId(getNewIdentifier());
            software1.setVersion("1.3");
            softwareList.getSoftware().add(software1);
            softwareList.setCount(getBigInteger(1));
            nmrMLtype.setSoftwareList(softwareList);


       /* Software Ref List */

            SoftwareRefListType softwareRefList = objFactory.createSoftwareRefListType();
            SoftwareRefType softref1 = objFactory.createSoftwareRefType();
            softref1.setRef(software1);
            softwareRefList.getSoftwareRef().add(softref1);


       /* ReferenceableParamGroup List */
            /* TODO */


       /* Sample List */

            SampleListType samplelist = objFactory.createSampleListType();
            SampleType sample = objFactory.createSampleType();
            //sample.setOriginalBiologicalSampleReference("http://www.cbib.u-bordeaux2.fr/MERYB/res/spectra/367");
            /* Solvent */
            sample.setSolventType(cvLoader.fetchCVTerm("CHEBI","D2O"));
            /* Buffer */
            sample.setBuffer(cvLoader.fetchCVTerm("CHEBI","MIXTURE"));
            sample.setPostBufferpH(new Double(6.0));
            samplelist.getSample().add(sample);
            samplelist.setCount(getBigInteger(1));
            nmrMLtype.setSampleList(samplelist);

       /* InstrumentConfiguration List */

            InstrumentConfigurationListType instrumentConfList = objFactory.createInstrumentConfigurationListType();
            InstrumentConfigurationType instrumentConf = objFactory.createInstrumentConfigurationType();
            instrumentConf.getSoftwareRef().add(softref1);
            instrumentConf.setId(getNewIdentifier());

            CVParamType cvinstrument1 = objFactory.createCVParamType();
            cvinstrument1.setCvRef(cvNMR);
            cvinstrument1.setAccession("#NMR_1400194");
            cvinstrument1.setName("1mm_MicroProbe");
            cvinstrument1.setValue("");
            instrumentConf.getCvParam().add(cvinstrument1);

            instrumentConfList.getInstrumentConfiguration().add(instrumentConf);
            instrumentConfList.setCount(getBigInteger(1));
            nmrMLtype.setInstrumentConfigurationList(instrumentConfList);


       /* Acquition */

            /* AcquisitionParameterSet */
            AcquisitionParameterSet1DType acqparam = objFactory.createAcquisitionParameterSet1DType();
            acqparam.setNumberOfScans(getBigInteger(64));

            ValueWithUnitType  SweepWidth = objFactory.createValueWithUnitType();
            SweepWidth.setValue("12.01532577");
            SweepWidth.setUnitCvRef(cvUO);
            SweepWidth.setUnitAccession("UO_0000169");
            SweepWidth.setUnitName("parts per million");

            ValueWithUnitType  IrradiationFrequency = objFactory.createValueWithUnitType();
            IrradiationFrequency.setValue("500162500.8");
            IrradiationFrequency.setUnitCvRef(cvUO);
            IrradiationFrequency.setUnitAccession("UO_0000106");
            IrradiationFrequency.setUnitName("Hertz");

            ValueWithUnitType  gammaB1PulseFieldStrength = objFactory.createValueWithUnitType();
            gammaB1PulseFieldStrength.setValue("500160000.0");
            gammaB1PulseFieldStrength.setUnitCvRef(cvUO);
            gammaB1PulseFieldStrength.setUnitAccession("UO_0000169");
            gammaB1PulseFieldStrength.setUnitName("Hertz");

           /* DirectDimensionParameterSet */
            AcquisitionDimensionParameterSetType acqdimparam = objFactory.createAcquisitionDimensionParameterSetType();
            acqdimparam.setNumberOfDataPoints(getBigInteger(32768));
            acqdimparam.setAcquisitionNucleus(cvLoader.fetchCVTerm("CHEBI","1H"));
            acqdimparam.setSweepWidth(SweepWidth);
            acqdimparam.setIrradiationFrequency(IrradiationFrequency);
            acqdimparam.setGammaB1PulseFieldStrength(gammaB1PulseFieldStrength);
            acqparam.setDirectDimensionParameterSet(acqdimparam);

            /* acquisitionParameterFileRefList */
            SourceFileRefListType acqFileRefList = objFactory.createSourceFileRefListType();
            SourceFileRefType acqFileRef = objFactory.createSourceFileRefType();
            acqFileRef.setRef(acqfile);
            acqFileRefList.getSourceFileRef().add(acqFileRef);
            acqFileRefList.setCount(getBigInteger(1));
            acqparam.setAcquisitionParameterFileRefList(acqFileRefList);


            /* PulseSequence */
            PulseSequenceType.PulseSequenceFileRefList pulseFileRefList = objFactory.createPulseSequenceTypePulseSequenceFileRefList();
            SourceFileRefType pulseFileRef = objFactory.createSourceFileRefType();
            pulseFileRef.setRef(pulsefile);
            pulseFileRefList.getPulseSequenceFileRef().add(pulseFileRef);

            PulseSequenceType pulse_sequence = objFactory.createPulseSequenceType();
            pulse_sequence.setPulseSequenceFileRefList(pulseFileRefList);

            //pulse_sequence.setName("zg.eretic.1H.2");
            acqparam.setPulseSequence(pulse_sequence);

            /* fidData */
            BinaryDataArrayType fidData = objFactory.createBinaryDataArrayType();

            /* Acquisition1D */
            Acquisition1DType acq1Dtype = objFactory.createAcquisition1DType();
            acq1Dtype.setAcquisitionParameterSet(acqparam);

            AcquisitionType acqtype = objFactory.createAcquisitionType();
            acqtype.setAcquisition1D(acq1Dtype);
            nmrMLtype.setAcquisition(acqtype);


       /* DataProcessing List */

            DataProcessingListType dataproclist = objFactory.createDataProcessingListType();
            DataProcessingType dataproc = objFactory.createDataProcessingType();
            ProcessingMethodType procmethod = objFactory.createProcessingMethodType();
            procmethod.setOrder(getBigInteger(1));
            procmethod.setSoftwareRef(software1);
            CVParamType cvproc1 = objFactory.createCVParamType();
            cvproc1.setCvRef(cvNMR);
            cvproc1.setAccession("#NMR_400043");
            cvproc1.setName("data_transformation");
            cvproc1.setValue("");
            procmethod.getCvParam().add(cvproc1);
            dataproc.getProcessingMethod().add(procmethod);
            dataproc.setId(getNewIdentifier());
            dataproclist.getDataProcessing().add(dataproc);
            dataproclist.setCount(getBigInteger(1));
            nmrMLtype.setDataProcessingList(dataproclist);


       /* Spectrum List */
            SpectrumListType spectrumList = objFactory.createSpectrumListType();
            Spectrum1DType spectrum1D = objFactory.createSpectrum1DType();
            /* Spectrum1D - FirstDimensionProcessingParameterSet */
            FirstDimensionProcessingParameterSetType ProcParam1D = objFactory.createFirstDimensionProcessingParameterSetType();

            /* Spectrum1D - WindowFunction */
            FirstDimensionProcessingParameterSetType.WindowFunction windowFunction = 
                    objFactory.createFirstDimensionProcessingParameterSetTypeWindowFunction();
            CVTermType cvWinFunc = objFactory.createCVTermType();
            cvWinFunc.setCvRef(cvNMR);
            cvWinFunc.setAccession("#NMR_400097");
            cvWinFunc.setName("Line Broadening");
            windowFunction.setWindowFunctionMethod(cvWinFunc);
            CVParamType cvWinParam = objFactory.createCVParamType();
            cvWinParam.setCvRef(cvNMR);
            cvWinParam.setAccession("#NMR_400097");
            cvWinParam.setName("Line Broadening");
            cvWinParam.setValue("0.3");
            windowFunction.getWindowFunctionParameter().add(cvWinParam);
            ProcParam1D.getWindowFunction().add(windowFunction);

            /* Spectrum1D - Phasing */
            ValueWithUnitType  zeroOrderPhaseCorrection = objFactory.createValueWithUnitType();
            zeroOrderPhaseCorrection.setValue("-27.58516");
            zeroOrderPhaseCorrection.setUnitCvRef(cvUO);
            zeroOrderPhaseCorrection.setUnitAccession("UO_0000185");
            zeroOrderPhaseCorrection.setUnitName("degree");
            ProcParam1D.setZeroOrderPhaseCorrection(zeroOrderPhaseCorrection);
            ValueWithUnitType  firstOrderPhaseCorrection = objFactory.createValueWithUnitType();
            firstOrderPhaseCorrection.setValue("-6.6");
            firstOrderPhaseCorrection.setUnitCvRef(cvUO);
            firstOrderPhaseCorrection.setUnitAccession("UO_0000185");
            firstOrderPhaseCorrection.setUnitName("degree");
            ProcParam1D.setFirstOrderPhaseCorrection(firstOrderPhaseCorrection);

            /* Spectrum1D - Source File Ref */
            SourceFileRefType procFileRef = objFactory.createSourceFileRefType();
            procFileRef.setRef(procfile);
            ProcParam1D.setParameterFileRef(procFileRef);
            spectrum1D.setFirstDimensionProcessingParameterSet(ProcParam1D);

            /* SpectrumType - X Axis */
            AxisWithUnitType Xaxis = objFactory.createAxisWithUnitType();
            Xaxis.setUnitCvRef(cvUO);
            Xaxis.setStartValue("11.09281");
            Xaxis.setEndValue("-0.92251577");
            Xaxis.setUnitAccession("UO_0000169");
            Xaxis.setUnitName("parts per million");
            spectrum1D.setXAxis(Xaxis);

            /* SpectrumType - Y Axis */
            spectrum1D.setYAxisType(cvLoader.fetchCVTerm("UO","NONE"));

            /* SpectrumType - Software, Contact Ref List */
            spectrum1D.getProcessingSoftwareRefList().add(softwareRefList);
            spectrum1D.setProcessingContactRefList(contactRefList);

            /* SpectrumType - ProcessingParameterSet */
            SpectrumType.ProcessingParameterSet procParamSet = objFactory.createSpectrumTypeProcessingParameterSet();
            procParamSet.setDataTransformationMethod(cvLoader.fetchCVTerm("NMRCV","FFT"));
            spectrum1D.setProcessingParameterSet(procParamSet);

            spectrum1D.setNumberOfDataPoints(getBigInteger(32768));
            spectrumList.getSpectrum1D().add(spectrum1D);
            spectrumList.setCount(getBigInteger(1));
            nmrMLtype.setSpectrumList(spectrumList);


       /* Generate XML */
            JAXBElement<NmrMLType> nmrML = (JAXBElement<NmrMLType>) objFactory.createNmrML(nmrMLtype);

            // create a JAXBContext capable of handling classes generated into the org.nmrml.schema package
            JAXBContext jc = JAXBContext.newInstance( "org.nmrml.schema" );

            // create a Marshaller and marshal to a file
            Marshaller m = jc.createMarshaller();
            m.setProperty( Marshaller.JAXB_FORMATTED_OUTPUT, new Boolean(true) );
            m.setProperty(Marshaller.JAXB_SCHEMA_LOCATION, "http://nmrML.org/schema/nmrML.xsd");
            m.marshal( nmrML, System.out );

        } catch( JAXBException je ) {
            je.printStackTrace();
        } catch( Exception e ) {
            e.printStackTrace();
        }

    }
}
